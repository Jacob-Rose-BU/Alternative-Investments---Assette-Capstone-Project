{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jacob-Rose-BU/Alternative-Investments---Assette-Capstone-Project/blob/main/PRODUCTMASTER.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# PRODUCTMASTER Table – Synthetic Data\n",
        "\n",
        "The `PRODUCTMASTER` table contains the core metadata for all investment products offered by the firm. Each row represents a distinct fund or product, including key attributes like strategy, legal structure, asset class, and share class. It also includes proxy keys for downstream tracking, such as performance and representative accounts.\n",
        "\n",
        "Additionally, the table may store qualitative narrative fields (e.g., fund description, strategy, and manager commentary) for factsheet generation. These fields are usually AI-generated based on fund characteristics and are tied to the same primary key (`PRODUCTCODE`). This table serves as a foundational dimension for joining with related tables like holdings, performance, attribution, and factsheet commentary.\n",
        "\n",
        "---\n",
        "\n",
        "| **Column Name**           | **Description**                                                                                              |\n",
        "|---------------------------|--------------------------------------------------------------------------------------------------------------|\n",
        "| `PRODUCTCODE`             | Unique code for each product. Used as a **primary key** and may appear as a **foreign key** in other tables. |\n",
        "| `PRODUCTNAME`             | Name of the product fund. Example: \"XYZ Growth Opportunities Fund\".                                          |\n",
        "| `STRATEGY`                | Investment strategy associated with the fund (e.g., \"Long/Short Equity\", \"Absolute Return\").                 |\n",
        "| `VEHICLECATEGORY`         | Broad category of the legal vehicle (e.g., \"Trust\", \"LLC\", \"LP\").                                            |\n",
        "| `VEHICLETYPE`             | Specific legal structure or subtype (e.g., \"Delaware LP\", \"Master-Feeder\", \"UCITS\").                         |\n",
        "| `ASSETCLASS`              | Primary asset class targeted by the fund (e.g., \"Private Equity\", \"Hedge Fund\", \"Real Assets\").              |\n",
        "| `SHARECLASS`              | Share class designation (e.g., \"Class A\", \"Institutional\", \"Retail\").                                        |\n",
        "| `PERFORMANCEACCOUNT`      | Simulated ID for performance tracking. Can be used as a **proxy key** in a performance table.                |\n",
        "| `REPRESENTATIVEACCOUNT`   | Simulated ID for reporting or marketing ownership. Also a **proxy key** in related commentary tables.        |\n",
        "| `ISMARKETED`              | Indicates whether the fund is actively marketed to investors (Yes/No).                                       |\n",
        "| `PARENTPRODUCTCODE`       | Code for the parent or umbrella product (used for hierarchical grouping).                                    |\n",
        "| `fund_description`        | Narrative summary describing the fund’s focus, goals, and investor appeal. *(AI-generated)*                  |\n",
        "| `fund_strategy`           | Summary of the fund’s investment strategy and asset focus. *(AI-generated)*                                  |\n",
        "| `fund_commentary_<Month>` | Manager commentary for a given reporting period (e.g., \"fund_commentary_May 2024\"). *(AI-generated)*          |\n",
        "\n",
        "---\n",
        "\n",
        "**Note:**  \n",
        "Keys like `PRODUCTCODE` may be reused in related tables (e.g., fund performance, holdings, commentary, attribution) as foreign key proxies.  \n",
        "The qualitative fields are dynamic and may be refreshed or extended over time as market or fund characteristics change."
      ],
      "metadata": {
        "id": "y-1wWEUOtgr7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install faker"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FmJ-YnuEuMO5",
        "outputId": "fa590a97-1379-4b1e-c293-8871895dc563"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: faker in /usr/local/lib/python3.11/dist-packages (37.5.3)\n",
            "Requirement already satisfied: tzdata in /usr/local/lib/python3.11/dist-packages (from faker) (2025.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install python-dotenv"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cx9cnIl6GYyJ",
        "outputId": "fd3c4840-badb-4db0-9bcc-28ead9e4b0a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting python-dotenv\n",
            "  Downloading python_dotenv-1.1.1-py3-none-any.whl.metadata (24 kB)\n",
            "Downloading python_dotenv-1.1.1-py3-none-any.whl (20 kB)\n",
            "Installing collected packages: python-dotenv\n",
            "Successfully installed python-dotenv-1.1.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import yaml\n",
        "import random\n",
        "import string\n",
        "import pandas as pd\n",
        "import requests\n",
        "from datetime import datetime, timedelta\n",
        "from faker import Faker\n",
        "from dotenv import load_dotenv\n",
        "from sqlalchemy import create_engine"
      ],
      "metadata": {
        "id": "mESFCatpGa7q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I0lZPmCgtEpp"
      },
      "outputs": [],
      "source": [
        "# Set up faker and random seed for reproducibility\n",
        "fake = Faker()\n",
        "random.seed(42)\n",
        "\n",
        "# Define how many rows of synthetic data to create\n",
        "NUM_ROWS = 50\n",
        "\n",
        "# Define realistic categorical values for each relevant field\n",
        "strategies = ['Growth Equity', 'Long/Short Equity', 'Direct Lending', 'Renewable Energy']\n",
        "vehicle_categories = ['LP', 'Feeder', 'Master', 'Offshore']\n",
        "vehicle_types = ['Delaware LP', 'Cayman SPC', 'UCITS', 'SICAV', 'Trust']\n",
        "asset_classes = ['Alternatives']\n",
        "share_classes = ['Class A', 'Class B', 'Institutional', 'Retail', 'Founder']\n",
        "is_marketed_options = ['Yes', 'No']\n",
        "\n",
        "# Pre-generate unique product codes to reference in parent-child relationships\n",
        "base_product_codes = [f\"PRD{i:04d}\" for i in range(1, NUM_ROWS + 1)]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize empty list to hold each synthetic row\n",
        "synthetic_data = []\n",
        "\n",
        "# Main data generation loop\n",
        "for i in range(NUM_ROWS):\n",
        "    product_code = base_product_codes[i]  # Unique key for this row\n",
        "    strategy = random.choice(strategies)\n",
        "    product_name = f\"{fake.company()} {strategy}\"  # Fund-style name\n",
        "    vehicle_category = random.choice(vehicle_categories)\n",
        "    vehicle_type = random.choice(vehicle_types)\n",
        "    asset_class = random.choice(asset_classes)\n",
        "    share_class = random.choice(share_classes)\n",
        "\n",
        "    # Proxy keys for use in performance/representative tables\n",
        "    performance_account = f\"PA-{random.randint(1000, 9999)}\"\n",
        "    representative_account = f\"RA-{random.randint(1000, 9999)}\"\n",
        "    is_marketed = random.choice(is_marketed_options)\n",
        "\n",
        "    # Assign a parent product code (cannot be self)\n",
        "    parent_product_code = random.choice([code for code in base_product_codes if code != product_code])\n",
        "\n",
        "    # Construct row as dictionary\n",
        "    synthetic_data.append({\n",
        "        'PRODUCTCODE': product_code,\n",
        "        'PRODUCTNAME': product_name,\n",
        "        'STRATEGY': strategy,\n",
        "        'VEHICLECATEGORY': vehicle_category,\n",
        "        'VEHICLETYPE': vehicle_type,\n",
        "        'ASSETCLASS': asset_class,\n",
        "        'SHARECLASS': share_class,\n",
        "        'PERFORMANCEACCOUNT': performance_account,  # can be used as FK in performance table\n",
        "        'REPRESENTATIVEACCOUNT': representative_account,  # can be FK in rep table\n",
        "        'ISMARKETED': is_marketed,\n",
        "        'PARENTPRODUCTCODE': parent_product_code  # simulated hierarchy\n",
        "    })"
      ],
      "metadata": {
        "id": "7cb0ElsatqIJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert to DataFrame\n",
        "df_funds = pd.DataFrame(synthetic_data)\n",
        "\n",
        "# Preview first few rows in Colab\n",
        "df_funds.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "mgDDeraQtJI4",
        "outputId": "7ddc0604-a693-4f37-ac66-11558a203933"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  PRODUCTCODE                                      PRODUCTNAME  \\\n",
              "0     PRD0001            Peters, Rogers and Medina Buyout Fund   \n",
              "1     PRD0002  Perry, Williams and Morales Direct Lending Fund   \n",
              "2     PRD0003  Clark, Williams and Jones Renewable Energy Fund   \n",
              "3     PRD0004                Mccall Inc Long/Short Equity Fund   \n",
              "4     PRD0005       Munoz, May and Mckee Renewable Energy Fund   \n",
              "\n",
              "            STRATEGY VEHICLECATEGORY  VEHICLETYPE      ASSETCLASS  \\\n",
              "0             Buyout          Master   Cayman SPC      Hedge Fund   \n",
              "1             Buyout              LP  Delaware LP      Hedge Fund   \n",
              "2     Direct Lending          Feeder        SICAV     Real Estate   \n",
              "3      Growth Equity          Feeder        UCITS  Private Equity   \n",
              "4  Long/Short Equity              LP        SICAV     Real Estate   \n",
              "\n",
              "      SHARECLASS PERFORMANCEACCOUNT REPRESENTATIVEACCOUNT ISMARKETED  \\\n",
              "0        Class B            PA-2679               RA-9935        Yes   \n",
              "1        Class B            PA-9279               RA-1434        Yes   \n",
              "2  Institutional            PA-1106               RA-3615         No   \n",
              "3        Class A            PA-7224               RA-2584         No   \n",
              "4        Class A            PA-7201               RA-2291         No   \n",
              "\n",
              "  PARENTPRODUCTCODE  \n",
              "0           PRD0039  \n",
              "1           PRD0047  \n",
              "2           PRD0023  \n",
              "3           PRD0024  \n",
              "4           PRD0042  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-74742f88-2cca-4a00-81e6-e54911d60158\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PRODUCTCODE</th>\n",
              "      <th>PRODUCTNAME</th>\n",
              "      <th>STRATEGY</th>\n",
              "      <th>VEHICLECATEGORY</th>\n",
              "      <th>VEHICLETYPE</th>\n",
              "      <th>ASSETCLASS</th>\n",
              "      <th>SHARECLASS</th>\n",
              "      <th>PERFORMANCEACCOUNT</th>\n",
              "      <th>REPRESENTATIVEACCOUNT</th>\n",
              "      <th>ISMARKETED</th>\n",
              "      <th>PARENTPRODUCTCODE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>PRD0001</td>\n",
              "      <td>Peters, Rogers and Medina Buyout Fund</td>\n",
              "      <td>Buyout</td>\n",
              "      <td>Master</td>\n",
              "      <td>Cayman SPC</td>\n",
              "      <td>Hedge Fund</td>\n",
              "      <td>Class B</td>\n",
              "      <td>PA-2679</td>\n",
              "      <td>RA-9935</td>\n",
              "      <td>Yes</td>\n",
              "      <td>PRD0039</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>PRD0002</td>\n",
              "      <td>Perry, Williams and Morales Direct Lending Fund</td>\n",
              "      <td>Buyout</td>\n",
              "      <td>LP</td>\n",
              "      <td>Delaware LP</td>\n",
              "      <td>Hedge Fund</td>\n",
              "      <td>Class B</td>\n",
              "      <td>PA-9279</td>\n",
              "      <td>RA-1434</td>\n",
              "      <td>Yes</td>\n",
              "      <td>PRD0047</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>PRD0003</td>\n",
              "      <td>Clark, Williams and Jones Renewable Energy Fund</td>\n",
              "      <td>Direct Lending</td>\n",
              "      <td>Feeder</td>\n",
              "      <td>SICAV</td>\n",
              "      <td>Real Estate</td>\n",
              "      <td>Institutional</td>\n",
              "      <td>PA-1106</td>\n",
              "      <td>RA-3615</td>\n",
              "      <td>No</td>\n",
              "      <td>PRD0023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>PRD0004</td>\n",
              "      <td>Mccall Inc Long/Short Equity Fund</td>\n",
              "      <td>Growth Equity</td>\n",
              "      <td>Feeder</td>\n",
              "      <td>UCITS</td>\n",
              "      <td>Private Equity</td>\n",
              "      <td>Class A</td>\n",
              "      <td>PA-7224</td>\n",
              "      <td>RA-2584</td>\n",
              "      <td>No</td>\n",
              "      <td>PRD0024</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>PRD0005</td>\n",
              "      <td>Munoz, May and Mckee Renewable Energy Fund</td>\n",
              "      <td>Long/Short Equity</td>\n",
              "      <td>LP</td>\n",
              "      <td>SICAV</td>\n",
              "      <td>Real Estate</td>\n",
              "      <td>Class A</td>\n",
              "      <td>PA-7201</td>\n",
              "      <td>RA-2291</td>\n",
              "      <td>No</td>\n",
              "      <td>PRD0042</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74742f88-2cca-4a00-81e6-e54911d60158')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-74742f88-2cca-4a00-81e6-e54911d60158 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-74742f88-2cca-4a00-81e6-e54911d60158');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-136fb1e8-03f7-4fff-a984-94b96ddf37f5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-136fb1e8-03f7-4fff-a984-94b96ddf37f5')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-136fb1e8-03f7-4fff-a984-94b96ddf37f5 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_funds",
              "summary": "{\n  \"name\": \"df_funds\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"PRODUCTCODE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"PRD0014\",\n          \"PRD0040\",\n          \"PRD0031\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PRODUCTNAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"Pugh and Sons Long/Short Equity Fund\",\n          \"Bonilla Inc Direct Lending Fund\",\n          \"Miles-Howard Long/Short Equity Fund\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STRATEGY\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Direct Lending\",\n          \"Renewable Energy\",\n          \"Growth Equity\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VEHICLECATEGORY\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"LP\",\n          \"Offshore\",\n          \"Master\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VEHICLETYPE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Delaware LP\",\n          \"Trust\",\n          \"SICAV\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ASSETCLASS\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Real Estate\",\n          \"Private Credit\",\n          \"Private Equity\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SHARECLASS\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Institutional\",\n          \"Founder\",\n          \"Class A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PERFORMANCEACCOUNT\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"PA-1053\",\n          \"PA-5371\",\n          \"PA-8491\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"REPRESENTATIVEACCOUNT\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"RA-5315\",\n          \"RA-3608\",\n          \"RA-6180\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ISMARKETED\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PARENTPRODUCTCODE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 33,\n        \"samples\": [\n          \"PRD0029\",\n          \"PRD0030\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter only the required columns for reference in other tables\n",
        "df_productcode = df_funds[['PRODUCTCODE']] # For use in PORTFOLIOGENERALINFORMATION.ipynb file\n",
        "\n",
        "# Export to CSV (no index)\n",
        "df_productcode.to_csv('product_codes.csv', index=False)"
      ],
      "metadata": {
        "id": "UCsxZ5bi-maV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# GPT-Generated Synthetic Data\n",
        "\n",
        "This portion of the notebook uses the OpenRouter API to generate high-quality synthetic factsheet commentary for alternative investment funds. It accepts structured fund metadata—such as product code, strategy, vehicle type, and asset class—and produces templated narrative sections: **fund description**, **strategy summary**, and **manager commentary**.\n",
        "\n",
        "The generated text is intended to populate qualitative fields in the `PRODUCTMASTER` table within Snowflake, complementing numerical holdings, ESG scores, and performance data. Full integration with Snowflake and other data sources is planned after successful testing of the API key and pipeline stability.\n",
        "\n",
        "---\n",
        "\n",
        "## Execution Instructions\n",
        "\n",
        "1. **Ensure your OpenRouter API key** is securely stored in your environment (`OPENROUTER_API_KEY`) or loaded via `.env` using `dotenv`.\n",
        "2. **Upload your fund metadata file** (e.g., `product_codes.csv`) which contains at least `PRODUCTCODE` and `PRODUCTNAME`.\n",
        "3. **Run the notebook top to bottom**, ensuring each section executes without error.\n",
        "4. **Review or customize the GPT prompt templates** if needed for tone, brand alignment, or format.\n",
        "5. Final enriched outputs will be available as a CSV for download or further pipeline integration.\n",
        "\n",
        "---\n",
        "\n",
        "## File Roadmap\n",
        "\n",
        "1. **Upload Input File**\n",
        "   - Accept fund metadata including columns such as `PRODUCTCODE`, `PRODUCTNAME`, `STRATEGY`, `ASSETCLASS`, etc.\n",
        "\n",
        "2. **Define Prompt Templates**\n",
        "   - Generate fund-specific GPT prompts for:\n",
        "     - Fund Description\n",
        "     - Strategy Summary\n",
        "     - Manager Commentary\n",
        "\n",
        "3. **Call GPT API**\n",
        "   - Use the OpenRouter API to generate qualitative text for each fund row.\n",
        "   - Responses are logged and formatted.\n",
        "\n",
        "4. **Export Output**\n",
        "   - All generated narratives are merged back into the original dataset.\n",
        "   - CSV download is enabled for offline use or QA.\n",
        "\n",
        "5. **(Coming Soon) Snowflake Integration**\n",
        "   - Load output directly to Snowflake.\n",
        "   - Enhance prompt inputs using historical stock, ESG, and performance data via Snowflake queries.\n",
        "   - This step is paused until the API key is verified and prompt-response logic is finalized.\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "UsAkiPc9GENe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Upload env file with your API key\n",
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "SCkrZyXLGQNP",
        "outputId": "dae36eed-77fa-42f0-9029-ec6d1119fe54"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-d7f86a58-43e6-4493-953e-724f6dfd9277\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-d7f86a58-43e6-4493-953e-724f6dfd9277\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving env.txt to env.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Rename the file if needed\n",
        "import os\n",
        "\n",
        "if os.path.exists(\"env.txt\"):\n",
        "    os.rename(\"env.txt\", \".env\")\n",
        "    print(\"Renamed env.txt to .env\")\n",
        "else:\n",
        "    print(\"File not found. Make sure you uploaded .env.txt.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W4kDDpS4GnLA",
        "outputId": "511b4a08-d484-4e82-fb66-6e8c10be24b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Renamed env.txt to .env\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load environment variables\n",
        "load_dotenv()\n",
        "\n",
        "# Get the API key from environment variables\n",
        "api_key = os.getenv(\"OPENROUTER_API_KEY\")\n",
        "\n",
        "if not api_key:\n",
        "    raise ValueError(\"API key not found. Make sure it's defined in the .env file.\")\n",
        "\n",
        "# url = \"https://openrouter.ai/api/v1/chat/completions\"\n",
        "\n",
        "# Corrected POST-based API request function\n",
        "def fetch_data_from_api(prompt):\n",
        "    url = \"https://openrouter.ai/api/v1/chat/completions\"\n",
        "\n",
        "    headers = {\n",
        "        \"Authorization\": f\"Bearer {api_key}\",\n",
        "        \"HTTP-Referer\": \"https://colab.research.google.com\",  # Must match whitelisted origin\n",
        "        \"Content-Type\": \"application/json\"\n",
        "    }\n",
        "\n",
        "    payload = {\n",
        "        \"model\": \"mistralai/mistral-7b-instruct\",  # You can change this to any available OpenRouter model\n",
        "        \"messages\": [{\"role\": \"user\", \"content\": prompt}],\n",
        "        \"temperature\": 0.7,\n",
        "        \"max_tokens\": 300\n",
        "    }\n",
        "\n",
        "    try:\n",
        "        response = requests.post(url, headers=headers, json=payload, timeout=15)\n",
        "        response.raise_for_status()  # Raises HTTPError for 4xx or 5xx status\n",
        "\n",
        "        data = response.json()\n",
        "\n",
        "        if \"choices\" not in data or not data[\"choices\"]:\n",
        "            raise ValueError(\"No choices returned in API response.\")\n",
        "\n",
        "        return data[\"choices\"][0][\"message\"][\"content\"].strip()\n",
        "\n",
        "    except requests.exceptions.HTTPError as http_err:\n",
        "        print(f\"HTTP error occurred: {http_err} - Status code: {response.status_code}\")\n",
        "        print(\"Response content:\", response.text)\n",
        "    except requests.exceptions.RequestException as req_err:\n",
        "        print(f\"Request error: {req_err}\")\n",
        "    except ValueError as ve:\n",
        "        print(f\"Data error: {ve}\")\n",
        "    except Exception as e:\n",
        "        print(f\"Unexpected error: {e}\")\n",
        "\n",
        "    return None"
      ],
      "metadata": {
        "id": "1rVjEZyxGo93"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ----------- PROMPT GENERATION -----------\n",
        "\n",
        "def create_fund_description_prompt(row):\n",
        "    return f\"\"\"\n",
        "Write a concise description for a hypothetical alternatives fund named {row['PRODUCTNAME']}.\n",
        "This fund follows a {row['STRATEGY']} strategy and is structured as a {row['VEHICLECATEGORY']} vehicle ({row['VEHICLETYPE']}).\n",
        "It focuses on the {row['ASSETCLASS']} asset class and offers the {row['SHARECLASS']} share class.\n",
        "It is marketed as part of the broader product line {row['PRODUCTCODE']} and may roll up to parent product {row['PARENTPRODUCTCODE']}.\n",
        "Describe its primary themes, investor appeal, and product positioning in the alternative space.\n",
        "\"\"\"\n",
        "\n",
        "def create_strategy_prompt(row):\n",
        "    return f\"\"\"\n",
        "Summarize the investment strategy of the fund {row['PRODUCTNAME']}.\n",
        "It applies a {row['STRATEGY']} approach within the {row['ASSETCLASS']} asset class.\n",
        "The fund is offered through a {row['VEHICLECATEGORY']} vehicle type ({row['VEHICLETYPE']}) and is marketed using the {row['SHARECLASS']} share class structure.\n",
        "Limit to 100 words and maintain an institutional tone.\n",
        "\"\"\"\n",
        "\n",
        "def create_manager_commentary_prompt(row):\n",
        "    month_year = datetime.today().strftime(\"%B %Y\")\n",
        "\n",
        "    return f\"\"\"\n",
        "Write a professional manager commentary for {row['PRODUCTNAME']} for {month_year}.\n",
        "Include:\n",
        "- Any challenges relevant to the {row['ASSETCLASS']} space\n",
        "- Macro or market trends impacting {row['STRATEGY']} strategies\n",
        "- A forward-looking outlook for investors in {row['SHARECLASS']} class funds\n",
        "Use institutional language appropriate for alternative investment marketing.\n",
        "\"\"\""
      ],
      "metadata": {
        "id": "6hOKn9O8GqeO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_qualitative_paragraphs(df):\n",
        "    \"\"\"\n",
        "    Generate qualitative descriptions, strategies, and manager commentary\n",
        "    for each alternative fund in the provided DataFrame.\n",
        "\n",
        "    Each row must contain the following columns:\n",
        "    PRODUCTCODE, PRODUCTNAME, STRATEGY, VEHICLECATEGORY, VEHICLETYPE,\n",
        "    ASSETCLASS, SHARECLASS, PERFORMANCEACCOUNT, REPRESENTATIVEACCOUNT,\n",
        "    ISMARKETED, PARENTPRODUCTCODE\n",
        "\n",
        "    Returns:\n",
        "        pd.DataFrame with original fund data + qualitative text fields.\n",
        "    \"\"\"\n",
        "    qualitative_rows = []\n",
        "\n",
        "    # Use current month/year for commentary label\n",
        "    month_year = datetime.today().strftime(\"%B %Y\")\n",
        "\n",
        "    for _, fund in df.iterrows():\n",
        "        print(f\"📝 Generating for {fund['PRODUCTNAME']}\")\n",
        "\n",
        "        # Generate prompts\n",
        "        desc_prompt = create_fund_description_prompt(fund)\n",
        "        strat_prompt = create_strategy_prompt(fund)\n",
        "        comm_prompt = create_manager_commentary_prompt(fund)\n",
        "\n",
        "        # Call GPT API or mocked function\n",
        "        fund_description = fetch_data_from_api(desc_prompt)\n",
        "        fund_strategy = fetch_data_from_api(strat_prompt)\n",
        "        fund_commentary = fetch_data_from_api(comm_prompt)\n",
        "\n",
        "        # Build enriched row\n",
        "        qualitative_rows.append({\n",
        "            **fund,\n",
        "            \"fund_description\": fund_description,\n",
        "            \"fund_strategy\": fund_strategy,\n",
        "            f\"fund_commentary_{month_year}\": fund_commentary\n",
        "        })\n",
        "\n",
        "    return pd.DataFrame(qualitative_rows)"
      ],
      "metadata": {
        "id": "IuaHVlFVGsuu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "enriched_df = generate_qualitative_paragraphs(df_funds)\n",
        "\n",
        "# Save to CSV (for export and Snowflake/other database usage)\n",
        "enriched_df.to_csv(\"productmaster_table_synthetic_data.csv\", index=False)\n",
        "\n",
        "print(\"✅ Synthetic data generated and saved as 'productmaster_table_synthetic_data.csv'\")"
      ],
      "metadata": {
        "id": "6sbsLMCetH8w",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2ba9c2ad-66ea-429d-bf1f-e4a02a1ffade"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📝 Generating for Peters, Rogers and Medina Buyout Fund\n",
            "📝 Generating for Perry, Williams and Morales Direct Lending Fund\n",
            "📝 Generating for Clark, Williams and Jones Renewable Energy Fund\n",
            "📝 Generating for Mccall Inc Long/Short Equity Fund\n",
            "📝 Generating for Munoz, May and Mckee Renewable Energy Fund\n",
            "📝 Generating for Oconnor Ltd Renewable Energy Fund\n",
            "📝 Generating for Williams Ltd Direct Lending Fund\n",
            "📝 Generating for Lee PLC Buyout Fund\n",
            "📝 Generating for Leonard, Thomas and Vargas Renewable Energy Fund\n",
            "📝 Generating for Turner Group Growth Equity Fund\n",
            "📝 Generating for Perez, Parsons and Mcclure Growth Equity Fund\n",
            "📝 Generating for Hughes, Johnson and Porter Renewable Energy Fund\n",
            "📝 Generating for Rodriguez and Sons Direct Lending Fund\n",
            "📝 Generating for Pugh and Sons Long/Short Equity Fund\n",
            "📝 Generating for Dickson-Taylor Buyout Fund\n",
            "📝 Generating for Merritt, Chandler and Williams Long/Short Equity Fund\n",
            "📝 Generating for Boone-White Buyout Fund\n",
            "📝 Generating for Hammond, Beck and Maddox Renewable Energy Fund\n",
            "📝 Generating for Powell LLC Renewable Energy Fund\n",
            "📝 Generating for Carter, Cook and Bell Growth Equity Fund\n",
            "📝 Generating for Coleman and Sons Growth Equity Fund\n",
            "📝 Generating for Anderson-Cole Growth Equity Fund\n",
            "📝 Generating for Jimenez, Mitchell and Moore Buyout Fund\n",
            "📝 Generating for Fox-Donaldson Direct Lending Fund\n",
            "📝 Generating for Green-Brown Renewable Energy Fund\n",
            "📝 Generating for Phelps-Williams Buyout Fund\n",
            "📝 Generating for Tyler, Serrano and Manning Renewable Energy Fund\n",
            "📝 Generating for Robertson LLC Long/Short Equity Fund\n",
            "📝 Generating for Henry, Lindsey and Campbell Buyout Fund\n",
            "📝 Generating for Maldonado PLC Renewable Energy Fund\n",
            "📝 Generating for Miles-Howard Long/Short Equity Fund\n",
            "📝 Generating for Jennings-Johnson Direct Lending Fund\n",
            "📝 Generating for Ellis-Byrd Buyout Fund\n",
            "📝 Generating for Brewer-Spence Renewable Energy Fund\n",
            "📝 Generating for Vasquez-Wade Renewable Energy Fund\n",
            "📝 Generating for Alexander, Ford and Flores Direct Lending Fund\n",
            "📝 Generating for Cox, Harris and Wyatt Direct Lending Fund\n",
            "📝 Generating for Park LLC Renewable Energy Fund\n",
            "📝 Generating for Dixon-Vaughn Growth Equity Fund\n",
            "📝 Generating for Bonilla Inc Direct Lending Fund\n",
            "📝 Generating for Evans, Phillips and Sanchez Buyout Fund\n",
            "📝 Generating for Morris PLC Growth Equity Fund\n",
            "📝 Generating for Lewis-Chavez Renewable Energy Fund\n",
            "📝 Generating for Lambert PLC Direct Lending Fund\n",
            "📝 Generating for Martinez, Thomas and Greene Buyout Fund\n",
            "📝 Generating for Martin, Barker and Love Long/Short Equity Fund\n",
            "📝 Generating for Carroll-Peters Long/Short Equity Fund\n",
            "📝 Generating for Collier and Sons Buyout Fund\n",
            "📝 Generating for Morris and Sons Growth Equity Fund\n",
            "📝 Generating for Lynch, Reyes and Mason Growth Equity Fund\n",
            "✅ Synthetic data generated and saved as 'productmaster_table_synthetic_data.csv'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Potential Snowflake Implementation\n",
        "This code is intended not only to demonstrate realistic data generation for academic or testing purposes but also to support end-to-end data pipelines where Snowflake acts as the target data warehouse. With minimal adjustments (e.g., schema renaming, batch control), this data can be used in:\n",
        "* Report generation (e.g., Assette)\n",
        "* Performance attribution systems\n",
        "* ESG dashboards\n",
        "* Fund analytics platforms\n",
        "\n",
        "The code below shows a programmatic load using snowflake.connector in Python. Please see example.env to include your Snowflake database and API keys."
      ],
      "metadata": {
        "id": "uBp58MOQ6mCf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import snowflake.connector\n",
        "\n",
        "# Load credentials\n",
        "load_dotenv()\n",
        "\n",
        "sf_user = os.getenv(\"SNOWFLAKE_USER\")\n",
        "sf_password = os.getenv(\"SNOWFLAKE_PASSWORD\")\n",
        "sf_account = os.getenv(\"SNOWFLAKE_ACCOUNT\")\n",
        "sf_database = os.getenv(\"SNOWFLAKE_DATABASE\")\n",
        "sf_schema = os.getenv(\"SNOWFLAKE_SCHEMA\")\n",
        "sf_warehouse = os.getenv(\"SNOWFLAKE_WAREHOUSE\")\n",
        "\n",
        "# Connect to Snowflake\n",
        "conn = snowflake.connector.connect(\n",
        "    user=sf_user,\n",
        "    password=sf_password,\n",
        "    account=sf_account,\n",
        "    warehouse=sf_warehouse,\n",
        "    database=sf_database,\n",
        "    schema=sf_schema\n",
        ")\n",
        "\n",
        "cursor = conn.cursor()\n",
        "\n",
        "# Function to upload DataFrame\n",
        "def append_to_snowflake(df, table_name):\n",
        "    try:\n",
        "        # Create temp CSV\n",
        "        temp_csv = \"/tmp/temp_fund_upload.csv\"\n",
        "        df.to_csv(temp_csv, index=False)\n",
        "\n",
        "        # Create staging area in memory\n",
        "        cursor.execute(f\"PUT file://{temp_csv} @%{table_name} OVERWRITE = TRUE\")\n",
        "\n",
        "        # Copy from staged CSV to table\n",
        "        columns = \",\".join(df.columns)\n",
        "        cursor.execute(f\"\"\"\n",
        "            COPY INTO {table_name}\n",
        "            FROM @%{table_name}\n",
        "            FILE_FORMAT = (TYPE = CSV FIELD_OPTIONALLY_ENCLOSED_BY='\"' SKIP_HEADER=1)\n",
        "        \"\"\")\n",
        "\n",
        "        print(f\"✅ Data appended to {table_name} in Snowflake\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(\"❌ Failed to upload data:\", e)\n",
        "    finally:\n",
        "        cursor.close()\n",
        "        conn.close()\n",
        "\n",
        "# Example usage:\n",
        "append_to_snowflake(df_funds, \"PRODUCTMASTER\")"
      ],
      "metadata": {
        "id": "wx74-zBP6fI1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "outputId": "f69baea6-3da9-4ff9-e19e-959afaac0893"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'snowflake'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2077364249.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0msnowflake\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnector\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Load credentials\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mload_dotenv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'snowflake'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    }
  ]
}