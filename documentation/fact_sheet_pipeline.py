# -*- coding: utf-8 -*-
"""Fact Sheet Pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I8fcpQAuMkgYlJxXNmxql33X5Cv_GtL7
"""

!apt-get install graphviz -y
!wget https://sourceforge.net/projects/plantuml/files/plantuml.jar/download -O plantuml.jar

uml_code = """
@startuml

title ESG Equity Fact Sheet Pipeline (Updated)

' --- Country ESG Information ---
[Source: World Bank API (ESG Statistics Country Level)] --> [Load Data from World Bank API to DataFrame (python)]
[Load Data from World Bank API to DataFrame (python)] --> [Output: Snowflake (TDB)]
[Output: Snowflake (TDB)]--> [SQL in Snowflake (compute ESG score)]
[SQL in Snowflake (compute ESG score)] --> [Create COUNTRY_ESG_BENCHMARK]
[Create COUNTRY_ESG_BENCHMARK] --> [ESG Performance Benchmark for Country Grouped Securities]

' --- Securities & Performance Data ---
['Source: yfinance(Securities, Performance, ESG Statistics Securities Level)] --> [Load Data from API to DataFrame(python)]
[Load Data from API to DataFrame(python)] --> [Output: Snowflake (security_master, stock_performance_history, esg_stock_data)]
[Output: Snowflake (security_master, stock_performance_history, esg_stock_data)] --> [SQL in Snowflake (fund performance calculation, ESG Score Calculation)]
[SQL in Snowflake (fund performance calculation, ESG Score Calculation)] --> [Fund Performance, ESG Score Fund Level]


' --- Funds ---
[Source: Synthetic Funds (snowflake)] --> [Create Funds Holding Table]
[Create Funds Holding Table] --> [Fund Holdings Reference]

' --- HR Data ---
[Source: Synthetic HR Data (python)] --> [Output to Excel (HR)]
[Output to Excel (HR)] --> [Load HR into a DataFrame (python)]
[Load HR into a DataFrame (python)] --> [Use OpenAI to Generate Team Summary]
[Use OpenAI to Generate Team Summary] --> [Team Summary]

' --- Compliance Data ---
[Source: Synthetic Compliance Data (python)] --> [Output to Excel (Compliance)]
[Output to Excel (Compliance)] --> [Compliance Information and Footnotes]

' --- GPT Summary ---
[Source: OpenRouter API (Fund Summary)] --> [Load Data for OpenRouter API to DataFrame (python)]
[Load Data for OpenRouter API to DataFrame (python)] --> [Use OpenRouter to Generate Fund Narratives]
[Use OpenRouter to Generate Fund Narratives] --> [Output: CSV]
[Output: CSV] --> [Create FUND_PROFILE_NARRATIVES]
[Create FUND_PROFILE_NARRATIVES] --> [Push CSV narratives data to Snowflake FUND_PROFILE_NARRATIVES table]

' --- Fact Sheet Output ---
[ESG Performance Benchmark for Country Grouped Securities] --> [ESG Fact Sheet]
[Fund Performance, ESG Score Fund Level] --> [ESG Fact Sheet]
[Fund Holdings Reference] --> [ESG Fact Sheet]
[Team Summary] --> [ESG Fact Sheet]
[Compliance Information and Footnotes] --> [ESG Fact Sheet]
[Push CSV narratives data to Snowflake FUND_PROFILE_NARRATIVES table]--> [ESG Fact Sheet]

@enduml
"""

with open("pipeline_diagram.puml", "w") as file:
    file.write(uml_code)

!java -jar plantuml.jar pipeline_diagram.puml

from IPython.display import Image
Image(filename="pipeline_diagram.png")
# * indicates that it is completed

how does the data get to snowflake? dont think about it as data flow. i have holdings table, what do i need to do to query for it? holdings have securities and portolio weights. with specific weights and account

we are missing data - what data (other than benchmark?)

if you look at the first 3 lines of any fact sheet, you need account and currency. dont have currency who are you selling to. when you wuery into yahoo finance, we are asumming its in USD, but rn its hard coded in original scripts, so need to have it pulled somewhere. look at your original fact sheet- it has regional breakouts and we have info from world factbook but how are we getting the information? we are explicitly putting united states. take. alook at fact sheet, what are we missing from there.
world bank api - pulling country -
dont do things in memory ( what is this) calling out to api each time . you need to rest this somewhere.
when you get info from factbook without context its meaningless. how are we connecting united states
countries based on holdings, where is the country

"""The diagram then illustrates how all data flows into a central Python pipeline that generates the final Fact Sheet output. The result is a clear, top-down visual representation of the data integration and reporting process.

# Data Map
"""

from graphviz import Digraph

dot = Digraph(comment="ESG Database - PK/FK Relationships", format='png')
dot.attr(rankdir='LR', fontsize='10')
dot.attr('node', shape='record', style='filled', fillcolor='lightblue')

# Define tables with PK/FK annotations
dot.node('FUND_PROFILE_ESG', '''{FUND_PROFILE_ESG|
PK: FUND_NAME\\l
FUND_FOCUS\\l
AVG_ENVIRONMENT_SCORE\\l
AVG_SOCIAL_SCORE\\l
AVG_GOVERNANCE_SCORE\\l
AVG_TOTAL_ESG_SCORE\\l}''')

dot.node('FUND_HOLDINGS_ESG', '''{FUND_HOLDINGS_ESG|
FK: FUND_NAME \\l
FK: SYMBOL \\l
DATE\\l
PRICE_PER_SHARE_USD\\l
SHARES_HELD\\l
WEIGHT\\l}''')

dot.node('SECURITY_MASTER', '''{SECURITY_MASTER|
PK: SYMBOL\\l
NAME\\l
SECTOR\\l
INDUSTRY\\l}''')

dot.node('ESG_STOCK_DATA', '''{ESG_STOCK_DATA|
PK: SYMBOL\\l
ENVIRONMENTSCORE\\l
SOCIALSCORE\\l
GOVERNANCESCORE\\l
TOTALESG\\l}''')

dot.node('STOCK_PERFORMANCE_HISTORY', '''{STOCK_PERFORMANCE_HISTORY|
PK: SYMBOL \\l
DATE\\l
OPEN\\l
CLOSE\\l
VOLUME\\l}''')

dot.node('PORTFOLIOGENERALINFORMATION', '''{PORTFOLIOGENERALINFORMATION|
FK: PRODUCTCODE \\l
PORTFOLIOCODE\\l
PORTFOLIOCATEGORY\\l}''')

dot.node('PRODUCTMASTER', '''{PRODUCTMASTER|
PK: PRODUCTCODE\\l
PRODUCTNAME\\l
STRATEGY\\l}''')

dot.node('BENCHMARKCHARACTERISTICS', '''{BENCHMARKCHARACTERISTICS|
FK: BENCHMARKCODE \\l
CHARACTERISTICNAME\\l
CHARACTERISTICVALUE\\l}''')

dot.node('BENCHMARKPERFORMANCE', '''{BENCHMARKPERFORMANCE|
PK: BENCHMARKCODE + HISTORYDATE\\l
VALUE\\l}''')

# Add relationships (FK â†’ PK)
dot.edge('FUND_HOLDINGS_ESG', 'FUND_PROFILE_ESG', label='FUND_NAME')
dot.edge('FUND_HOLDINGS_ESG', 'SECURITY_MASTER', label='SYMBOL')
dot.edge('FUND_HOLDINGS_ESG', 'ESG_STOCK_DATA', label='SYMBOL')
dot.edge('PORTFOLIOGENERALINFORMATION', 'PRODUCTMASTER', label='PRODUCTCODE')
dot.edge('BENCHMARKCHARACTERISTICS', 'BENCHMARKPERFORMANCE', label='BENCHMARKCODE')

# Save diagram
output_path = dot.render('/mnt/data/esg_pk_fk_relationships', view=False)
output_path

# Step 1: Install dependencies
!apt-get install -y graphviz
!pip install plantuml

# Step 2: Download PlantUML JAR
!wget -O plantuml.jar https://sourceforge.net/projects/plantuml/files/plantuml.jar/download

# Step 3: Save the UML code to a file
uml_code = """
@startuml
title Data Flow Diagram

left to right direction
skinparam defaultTextAlignment center

package "Data Source" {
  [Vanguard]
  [Yahoo Finance]
  [Currency REST API]
}

package "Table" {
  [Product Master]
  [Benchmark Performance]
  [Benchmark General Information]
  [Benchmark Characteristic]
  [Holding details]
  [Portfolio Performance]
  [Currency]
  [Portfolio General Information]
  [Portfolio Benchmark Association]
}

package "Database" {
  [Snowflake]
  [Excel]
}

[Vanguard] --> [Product Master]
[Yahoo Finance] --> [Benchmark Performance]
[Yahoo Finance] --> [Benchmark Characteristic]
[Yahoo Finance] --> [Benchmark General Information]
[Yahoo Finance] --> [Holding details]
[Yahoo Finance] --> [Portfolio Performance]
[Currency REST API] --> [Currency]

[Benchmark Performance] --> [Snowflake]
[Benchmark General Information] --> [Snowflake]
[Benchmark Characteristic] --> [Snowflake]
[Holding details] --> [Snowflake]
[Portfolio Performance] --> [Snowflake]
[Currency] --> [Snowflake]
[Portfolio General Information] --> [Snowflake]
[Product Master] --> [Snowflake]
[Portfolio Benchmark Association] --> [Snowflake]

[Portfolio General Information] --> [Excel]
[Product Master] --> [Excel]
[Portfolio Performance] --> [Excel]
[Holding details] --> [Excel]
[Benchmark General Information] --> [Excel]

@enduml
"""

with open("diagram.puml", "w") as file:
    file.write(uml_code)

# Step 4: Render the diagram
!java -jar plantuml.jar -tpng diagram.puml

# Step 5: Display it
from IPython.display import Image
Image("diagram.png")

# Step 1: Install dependencies
!apt-get install -y graphviz
!pip install plantuml

# Step 2: Download PlantUML JAR
!wget -O plantuml.jar https://sourceforge.net/projects/plantuml/files/plantuml.jar/download

# Step 3: Save the UML code to a file
uml_code = """
@startuml
title Data Flow Diagram

left to right direction
skinparam defaultTextAlignment center

package "Data Source" {
  [Synthetic]
  [YFinance API]
  [OpenRouter API]
  [World Bank API]
}

package "Table" {
  [PRODUCTMASTER]
  [PORTFOLIOGENERALINFORMATION]
  [PORTFOLIOPERFORMANCE]
  [HOLDINGSDETAILS]
  [SECURITY_PERFORMANCE_HISTORY]
  [SECURITY_MASTER]
  [BENCHMARKPERFORMANCE]
  [BENCHMARKCHARACTERISTICS]
  [BENCHMARKGENERALINFORMATION]
  [PORTFOLIOBENCHMARKASSOCIATION]
  [HR_INFORMATION]
  [DISCLOSURE_INFORMATION]
}

package "Database" {
  [Python Dataframe]
  [Snowflake]
  [Excel]
}

[Synthetic] --> [PRODUCTMASTER]
[OpenRouter API] --> [PRODUCTMASTER]

[Synthetic] --> [PORTFOLIOGENERALINFORMATION]
[Synthetic] --> [PORTFOLIOBENCHMARKASSOCIATION]
[Synthetic] --> [HR_INFORMATION]
[Synthetic] --> [DISCLOSURE_INFORMATION]

[YFinance API] --> [PORTFOLIOPERFORMANCE]
[YFinance API] --> [HOLDINGSDETAILS]
[World Bank API] --> [HOLDINGSDETAILS]

[YFinance API] --> [SECURITY_PERFORMANCE_HISTORY]
[YFinance API] --> [SECURITY_MASTER]
[World Bank API] --> [SECURITY_MASTER]

[YFinance API] --> [BENCHMARKPERFORMANCE]
[YFinance API] --> [BENCHMARKCHARACTERISTICS]
[YFinance API] --> [BENCHMARKGENERALINFORMATION]

[PRODUCTMASTER] --> [Python Dataframe]
[PORTFOLIOGENERALINFORMATION] --> [Python Dataframe]
[PORTFOLIOPERFORMANCE] --> [Python Dataframe]
[HOLDINGSDETAILS] --> [Python Dataframe]
[BENCHMARKPERFORMANCE] --> [Python Dataframe]
[BENCHMARKCHARACTERISTICS] --> [Python Dataframe]
[BENCHMARKGENERALINFORMATION] --> [Python Dataframe]
[PORTFOLIOBENCHMARKASSOCIATION] --> [Python Dataframe]

[SECURITY_PERFORMANCE_HISTORY] --> [Snowflake]
[SECURITY_MASTER] --> [Snowflake]

[HR_INFORMATION] --> [Excel]
[DISCLOSURE_INFORMATION] --> [Excel]

@enduml
"""

with open("diagram.puml", "w") as file:
    file.write(uml_code)

# Step 4: Render the diagram
!java -jar plantuml.jar -tpng diagram.puml

# Step 5: Display it
from IPython.display import Image
Image("diagram.png")
